#!/bin/bash

logo() {

  clear
  unset blank
  cols=$(tput cols)
  if (( "$cols" > 30 )); then
    for ((i=31; i < "$cols"-1; i+=2)); do blank+=' '; done
    echo
    echo
    echo "$blank   ___"
    echo "$blank  / _ \__ ____ _  ___  ___ ____"
    echo "$blank / // / // /  ' \/ _ \/ -_) __/"
    echo "$blank/____/\_,_/_/_/_/ .__/\__/_/"
    echo "$blank               /_/By TyraVex"
    echo
  fi

}

menu() {

  logo

  case "$1" in
    error) echo -e "\e[31mERROR : $2\e[0m";;
    info) echo -e "\e[33mINFO : $2\e[0m";;
    silent) echo "$2"
  esac

  mkdir -p .data
  rm -f .data/*.new
  touch .data/credentials
  urls=('annales-ts' 'exercices-de-1ere-s-3' 'dns-ts' 'photos-ts-eric-b')
  paths=('annals' 'exercices' 'dns' 'photos')

  if [[ $(cat .data/credentials) =~ [a-z0-9] ]]; then
    cookie=$(cat .data/credentials)
  else
    echo -e 'No cookies found\n'
    read -p "Cookie : " cookie
    echo "$cookie" > .data/credentials
  fi

  unset dashes check
  cols=$(tput cols)
  for ((i=11; i < "$cols"-1; i+=2)); do dashes+='-'; done
  echo -e "\e[34m\n$dashes MAIN MENU $dashes\n\e[0m"

  for ((i=0; i < "${#urls[@]}"; i++)); do
    if [[ -s .data/"${paths[i]}" ]]; then
      echo -e "\e[32m[$((i+1))] - ${paths[i]}\e[0m"
    else
      echo -e "\e[33m[$((i+1))] - ${paths[i]}\e[0m"
    fi
  done

  echo -e '\e[36m\n[ø] - All options\e[0m'
  echo -e "\e[31m[e] - Exit\n\e[0m"
  read -p "Option : " choice
  unset usePth useUrl
  trap 'tput cnorm; exit' 2 3
  tput civis
  echo

  case "$choice" in
    [1-4])
      usePath=("${paths[choice-1]}")
      useUrl=("${urls[choice-1]}");;
    '')
      usePath+=("${paths[@]}")
      useUrl+=("${urls[@]}");;
    e)exit;;
    *)menu 'error' 'Invalid input'
      return;;
  esac

  for ((i=0; i < "${#useUrl[@]}"; i++)); do
    curl -s "eric.bilinski.fr/index.php/classes/ts/${useUrl[i]}" -H 'Cookie: 6319cb2653680593249bdebaaa628a80='"$cookie"'' -o .data/"${usePath[i]}".new &
    pid["$i"]="$!"
  done
  jumpUp='\e[A'
  jumpDown=''
  spinner=('-' '\\' '|' '/')
  for ((i=0; i < "${#useUrl[@]}"; i++)); do
    jumpUp+='\e[A'
    jumpDown+='\n'
  done
  while [[ "${#check[@]}" != "${#useUrl[@]}" ]]; do
    for ((i=0; i < "${#useUrl[@]}"; i++)); do
      if ps -p "${pid[i]}" >/dev/null; then
        echo -e "\e[31m${spinner[phase]} - ${usePath[i]}\e[0m"
      elif [[ -s ".data/${usePath[i]}.new" ]]; then
        echo -e "\e[32m↓ - ${usePath[i]}\e[0m"
        toExec[i]="mv .data/${usePath[i]}.new .data/${usePath[i]}"
        check[i]=true
      else
        tput cnorm
        menu 'error' 'Cookie is invalid or expired'
        return
      fi
    done
    ((phase=("$phase"+1)%4))
    sleep 0.05
    echo -e "$jumpUp"
  done
  for ((i=0; i < "${#toExec[@]}"; i++)); do
    ${toExec[i]}
  done
  echo -e "$jumpDown"
  tput cnorm
  worker

}

updateIDpath() {
  parentID="${parentID//[^0-9]/}"
  while [[ ! "$parentID" == "${IDpath[-1]}" ]]; do
    unset IDpath[-1]
  done
}

namePath() {
  unset toCreate
  for ((j=0; j < "${#IDpath[@]}"; j++)); do
    toCreate+="${names[${IDpath[j]}]}/"
  done
}

cleanup() {
  echo -e '\n\nExiting...\n'
  echo 'Since wget was interrupted, files downloaded on this session were removed.' | fold -sw "$COLUMNS"
  if [[ -z $(find annals -type f) ]]; then rm -rf annals; fi
  rm -rf temp
  pkill wget
  exit
}

parser1() {

  unset paths links IDpath names tempFolders finalFolders
  readarray -t site <<< $(cat .data/"$usedPath")
  for ((i=0; i < "${#site[@]}"; i++)); do
    if [[ "${site[i]:2:2}" == 'tr' ]]; then
      case "${site[i+1]:91:1}" in
        _) type=.pdf;;
        g) type=.png;;
        a) type=.mp4;;
        .) type=;;
        *) type=;;
      esac
      [[ "${site[i+1]}" =~ '/index.php/component/easyfolderlistingpro/?view=download&format=raw&data='[a-zA-Z0-9_-]* ]] \
      && links+=("http://eric.bilinski.fr$BASH_REMATCH")
      [[ "${site[i+1]}" =~ 'k">'.*'</a><a class="eflpr' ]] \
      && name="${BASH_REMATCH:3:-19}"
      parentID="${site[i]:35:3}"
      updateIDpath
      namePath
      paths+=("$toCreate$name$type")
      ((i+=4))
    elif [[ "${site[i]:3:4}" == 'tr i' ]]; then
      case "${site[i+1]:39:1}" in
        ' ')
           folder="${site[i+1]:173:-5}"
           parentID="${site[i]:65:4}"
           updateIDpath;;
        *) folder="${site[i+1]:154:-5}"
           unset IDpath;;
      esac
      ID="${site[i]:24:3}"
      IDpath+=("${ID//[^0-9]/}")
      names+=("${folder// /-}")
      namePath
      tempFolders+=("temp/$toCreate")
      finalFolders+=("$usedPath/$toCreate")
      ((i+=4))
    fi
  done

  mkdir -p "${tempFolders[@]}" "${finalFolders[@]}"

  for ((i=0; i < "${#paths[@]}";i++)); do
    if [[ -f "$usedPath/${paths[i]}" ]]; then
      validMsg+=("\e[31mx | ${paths[i]:0:$COLUMNS-5}\e[0m")
    else
      wrongMsg+=echo -e "\e[32m↓ | ${paths[i]:0:$COLUMNS-5} \e[0m")
      downloadList=('wget '"${links[i]}"' -q -O temp/'"${paths[i]}"
    fi
  done

  countMsg+=("\n• $usedPath :\n> Mapped ${#paths[@]} files and ${#tempFolders[@]} folders")

  while [[ -n $([[ $(ps -e) =~ 'wget' ]] && echo "${BASH_REMATCH}") ]]; do
    size=$(du -s temp)
    size="$((${size//[^0-9]/}/1000))MB"
    echo -ne "> Downloading : $size\\r"
    sleep 0.02
  done

  if [[ -z "$size" ]]; then
    echo '> Already up to date'
  else
    echo "> Downloaded $filesDownloaded files and $size        "
    readarray -t files <<< $(find temp -type f)
    for ((i=0; i < "${#files[@]}"; i++)); do
      mv "${files[i]}" "$usedPath/${files[i]:5}" &
    done
  fi

  rm -rf temp
  echo

}

worker() {

  trap "cleanup" 2 3
  filesDownloaded=0

  if [[ "${usePath[@]}" =~ 'annals' ]]; then
    usedPath='annals'
    parser1
  fi
  if [[ "${usePath[@]}" =~ 'exercices' ]]; then
    usedPath='exercices'
    parser1
  fi
  if [[ "${usePath[@]}" =~ 'dns' ]]; then
    readarray -t site <<< $(cat .data/dns)
    echo 'dns section not supported yet'
  fi
  if [[ "${usePath[@]}" =~ 'photos' ]]; then
    readarray -t site <<< $(cat .data/photos)
    echo 'photos section not supported yet'
  fi

}

menu
