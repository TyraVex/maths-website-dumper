#!/bin/bash

logo() {

  clear
  unset blank
  cols=$(tput cols)
  if (( "$cols" > 30 )); then
    for ((i=31; i < "$cols"-1; i+=2)); do blank+=' '; done
    echo
    echo
    echo "$blank   ___"
    echo "$blank  / _ \__ ____ _  ___  ___ ____"
    echo "$blank / // / // /  ' \/ _ \/ -_) __/"
    echo "$blank/____/\_,_/_/_/_/ .__/\__/_/"
    echo "$blank               /_/By TyraVex"
    echo
  fi

}

menu() {

  logo
  case "$1" in
    error) echo -e "\e[31mERROR : $2\e[0m";;
    success) echo -e "\e[32mSUCCESS : $2\e[0m";;
    info) echo -e "\e[33mINFO : $2\e[0m";;
    silent) echo -e "$2"
  esac
  mkdir -p .data
  rm -f .data/*.new
  touch .data/credentials
  urls=('annales-ts' 'exercices-de-1ere-s-3' 'dns-ts' 'photos-ts-eric-b')
  paths=('annals' 'exercices' 'dns' 'photos')
  if [[ $(cat .data/credentials) =~ [a-z0-9] ]]; then
    cookie=$(cat .data/credentials)
  else
    echo -e 'No cookies found\n'
    read -p "Cookie : " cookie
    echo "$cookie" > .data/credentials
  fi
  unset dashes check tempFolders finalFolders links
  cols=$(tput cols)
  for ((i=11; i < "$cols"-1; i+=2)); do dashes+='-'; done
  echo -e "\e[34m\n$dashes MAIN MENU $dashes\n\e[0m"
  for ((i=0; i < "${#urls[@]}"; i++)); do
    if [[ -s .data/"${paths[i]}" ]]; then
      echo -e "\e[32m[$((i+1))] - ${paths[i]^}\e[0m"
    else
      echo -e "\e[33m[$((i+1))] - ${paths[i]^}\e[0m"
    fi
  done
  echo -e '\e[36m\n[ø|a] - All options\e[0m'
  echo -e '\e[36m[l.+] - Local mode\n\e[0m'
  echo -e '\e[33m[c] - Edit cookie\e[0m'
  echo -e "\e[31m[e] - Exit\n\e[0m"
  if [[ -z "$choice" ]]; then
    read -p "Option : " choice
  fi
  unset usePth useUrl localMode
  echo
  case "$choice" in
    [1-4])
      usePath=("${paths[choice-1]}")
      useUrl=("${urls[choice-1]}");;
    ''|a)
      usePath+=("${paths[@]}")
      useUrl+=("${urls[@]}");;
    l[1-4])
      choice="${choice:1}"
      usePath=("${paths[choice-1]}")
      useUrl=("${urls[choice-1]}")
      localMode=true;;
    l|la)
      usePath+=("${paths[@]}")
      useUrl+=("${urls[@]}")
      localMode=true;;
    e)exit;;
    c)unset choice
      echo 'For going back, send nothing'
      read -p "Cookie : " cookie
      if [[ -n "$cookie" ]]; then
        echo "$cookie" > .data/credentials
        menu 'success' 'Cookie edited'
      else
        menu 'info' 'Operation cancelled'
      fi
      return;;
    *)unset choice
      menu 'error' 'Invalid input'
      return;;
  esac
  if [[ -z "$localMode" ]]; then
    for ((i=0; i < "${#useUrl[@]}"; i++)); do
      curl -s "eric.bilinski.fr/index.php/classes/ts/${useUrl[i]}" -H 'Cookie: 6319cb2653680593249bdebaaa628a80='"$cookie"'' -o .data/"${usePath[i]}".new &
      pid["$i"]="$!"
    done
    trap 'tput cnorm; exit' 2 3
    tput civis
    jumpUp='\e[A'
    jumpDown=''
    spinner=('-' '\\' '|' '/')
    for ((i=0; i < "${#useUrl[@]}"; i++)); do
      jumpUp+='\e[A'
      jumpDown+='\n'
    done
    while [[ "${#check[@]}" != "${#useUrl[@]}" ]]; do
      for ((i=0; i < "${#useUrl[@]}"; i++)); do
        if ps -p "${pid[i]}" >/dev/null; then
          echo -e "\e[31m${spinner[phase]} - ${usePath[i]}\e[0m"
        elif [[ -s ".data/${usePath[i]}.new" ]]; then
          echo -e "\e[32m↓ - ${usePath[i]}\e[0m"
          toExec[i]="mv .data/${usePath[i]}.new .data/${usePath[i]}"
          check[i]=true
        else
          tput cnorm
          unset choice
          menu 'error' 'Cookie is invalid or expired'
          return
        fi
      done
      ((phase=("$phase"+1)%4))
      sleep 0.1
      echo -e "$jumpUp"
    done
    for ((i=0; i < "${#toExec[@]}"; i++)); do
      ${toExec[i]}
    done
    echo -e "$jumpDown"
    tput cnorm
  fi
  trap "cleanup" 2 3
  unset paths localMode choice
  if [[ "${usePath[@]}" =~ 'annals' ]]; then
    usedPath='annals'
    parser1
  fi
  if [[ "${usePath[@]}" =~ 'exercices' ]]; then
    usedPath='exercices'
    parser1
  fi
  if [[ "${usePath[@]}" =~ 'dns' ]]; then
    usedPath='dns'
    parser2
  fi
  if [[ "${usePath[@]}" =~ 'photos' ]]; then
    usedPath='photos'
    parser2
  fi
  downloader

}

updateIDpath() {
  parentID="${parentID//[^0-9]/}"
  while [[ ! "$parentID" == "${IDpath[-1]}" ]]; do
    unset IDpath[-1]
  done
}

namePath() {
  unset toCreate
  for ((j=0; j < "${#IDpath[@]}"; j++)); do
    toCreate+="${names[${IDpath[j]}]}/"
  done
}

cleanup() {
  echo -e '\n\nExiting...\n'
  rm -rf tempannals/ tempexercices/ tempdns/ tempphotos/
  pkill wget
  exit
}

parser1() {

  echo "> Parsing $usedPath"
  unset IDpath names
  readarray -t site <<< $(cat .data/"$usedPath")
  for ((i=0; i < "${#site[@]}"; i++)); do
    if [[ "${site[i]:2:2}" == 'tr' ]]; then
      case "${site[i+1]:91:1}" in
        _) type=.pdf;;
        g) type=.png;;
        a) type=.mp4;;
        p) type=.docx;;
        n) type=.exe;;
        .) type=;;
        *) echo "${site[i+1]:91:1}" "${site[i+1]}" > .data/errorLog
           type=;;
      esac
      [[ "${site[i+1]}" =~ '/index.php/component/easyfolderlistingpro/?view=download&format=raw&data='[a-zA-Z0-9_-]* ]] \
      && links+=("http://eric.bilinski.fr$BASH_REMATCH")
      [[ "${site[i+1]}" =~ 'k">'.*'</a><a class="eflpr' ]] \
      && name="${BASH_REMATCH:3:-19}"
      parentID="${site[i]:35:3}"
      updateIDpath
      namePath
      paths+=("$usedPath/$toCreate$name$type")
      ((i+=4))
    elif [[ "${site[i]:3:4}" == 'tr i' ]]; then
      case "${site[i+1]:39:1}" in
        ' ')
           folder="${site[i+1]:173:-5}"
           parentID="${site[i]:65:4}"
           updateIDpath;;
        *) folder="${site[i+1]:154:-5}"
           unset IDpath;;
      esac
      ID="${site[i]:24:3}"
      IDpath+=("${ID//[^0-9]/}")
      names+=("${folder// /-}")
      namePath
      tempFolders+=("temp$usedPath/$toCreate")
      finalFolders+=("$usedPath/$toCreate")
      ((i+=4))
    fi
  done

}

parser2() {

  echo "> NOT Parsing $usedPath (unsupported)"

}

downloader() {

  if [[ -n "$paths" ]]; then
    echo
    mkdir -p "${tempFolders[@]}" "${finalFolders[@]}" 2>/dev/null
    filesDownloaded=0
    totalFiles=0
    for ((i=0; i < "${#paths[@]}"; i++)); do
      if [[ -f "${paths[i]}" ]]; then
        echo -e "\e[31mx | ${paths[i]:0:$COLUMNS-5}\e[0m"
      else
        echo -e "\e[32m↓ | ${paths[i]:0:$COLUMNS-5} \e[0m"
        wget "${links[i]}" -q -O "temp${paths[i]}" && mv "temp${paths[i]}" "${paths[i]}" && ((filesDownloaded+=1)) &
        ((totalFiles++))
      fi
    done
    echo -e "\n> Mapped ${#paths[@]} files and ${#finalFolders[@]} folders"
    while [[ -n $([[ $(ps -e) =~ 'wget' ]] && echo "${BASH_REMATCH}") ]]; do
      echo -ne "> Downloading : $filesDownloaded/$totalFiles\\r"
      sleep 0.05
    done
    rm -rf tempannals/ tempexercices/ tempdns/ tempphotos/
    echo -e "> Downloaded $filesDownloaded files\n"
    read -p 'Press enter to continue...'
    menu 'success' "Mapped ${#paths[@]} files\nSUCCESS : Downloaded $filesDownloaded files"
  else
    menu 'error' 'Empty download list'
  fi

}

if [[ -n "$1" ]]; then arg=true; fi
choice="$1"
menu
